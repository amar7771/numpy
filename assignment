import numpy as np

# 1. Broadcasting
# a) Add a 1D array `[1, 2, 3]` to each row of a 2D array
arr1 = np.array([[10, 20, 30], [40, 50, 60]])
broad_arr1 = np.array([1, 2, 3])
res1 = arr1 + broad_arr1
print(res1)

# b) Multiply a 2D array column-wise
arr2 = np.array([[1, 2], [3, 4]])
broad_arr2 = np.array([10, 20])
res2 = arr2 * broad_arr2[:, np.newaxis]
print(res2)

# 2. Indexing and Slicing (High Dimensional Arrays)
arr = np.arange(1, 25).reshape(2, 3, 4)

# a) Extract the second slice along axis 0
res3 = arr[1]
print(res3)

# b) Extract all rows and the last column for all slices
res4 = arr[:, :, -1]
print(res4)

# c) Reverse the order of slices along axis 0
res5 = arr[::-1]
print(res5)

# d) Set all even elements in the array to -1
arr[arr % 2 == 0] = -1
print(arr)

# 3. np.repeat
arr3 = np.array([1, 2, 3, 4, 5, 6])

# a) Repeat odd elements twice
res6 = np.repeat(arr3[arr3 % 2 == 1], 2)
print(res6)

# b) Repeat elements based on their value
res7 = np.repeat(arr3, arr3)
print(res7)

# 4. Normalizing
arr4 = np.array([10, 20, 30])
res8 = (arr4 - arr4.min()) / (arr4.max() - arr4.min())
print(res8)

# 5. Bonus Challenge
# a) Create a 3x3 matrix where each element at position (i, j) is i * j
m = np.fromfunction(lambda i, j: i * j, (3, 3), dtype=int)
print(m)

# b) Replace diagonal elements with 0 in a 4x4 matrix
m2 = np.random.randint(1, 10, (4, 4))
np.fill_diagonal(m2, 0)
print(m2)
